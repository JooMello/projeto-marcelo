{"version":3,"sources":["main.js"],"names":["app","electron","BrowserWindow","mainWindow","prefStore","Store","configName","defaults","windowBounds","height","width","createWindow","get","webPreferences","nodeIntegration","webSecurity","isDevelopment","webContents","openDevTools","loadURL","url","format","pathname","path","join","__dirname","protocol","slashes","on","getBounds","set","process","platform","quit","makeSingleInstance","mas","requestSingleInstanceLock","isMinimized","restore","focus","loadDemos","files","glob","sync","forEach","file","require"],"mappings":"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","sourcesContent":["import electron from 'electron';\r\nimport path from 'path';\r\nimport url from 'url';\r\nimport isDevelopment from 'electron-is-dev';\r\nimport Store from './store';\r\nimport defaultData from './data/defaultData';\r\n\r\nconst app = electron.app;\r\nconst BrowserWindow = electron.BrowserWindow;\r\n\r\nlet mainWindow;\r\n\r\nconst prefStore = new Store({\r\n  configName: 'user-preferences',\r\n  defaults: {\r\n    windowBounds: {\r\n      height: 800,\r\n      width: 940\r\n    }\r\n  }\r\n});\r\n\r\nconst createWindow = () => {\r\n  const { height, width } = prefStore.get('windowBounds');\r\n\r\n  mainWindow = new BrowserWindow({\r\n    height,\r\n    webPreferences: {\r\n      nodeIntegration: true,\r\n      webSecurity: true\r\n    },\r\n    width\r\n  });\r\n\r\n  if (isDevelopment) {\r\n    mainWindow.webContents.openDevTools();\r\n  }\r\n\r\n  mainWindow.loadURL(\r\n    url.format({\r\n      pathname: path.join(__dirname, 'index.html'),\r\n      protocol: 'file:',\r\n      slashes: true\r\n    })\r\n  );\r\n\r\n  mainWindow.on('resize', () => {\r\n    // This event doesn't pass the window size, so call getBounds which returns\r\n    // an object with  height, width, and x and y coordinates.\r\n    const { height, width } = mainWindow.getBounds();\r\n\r\n    // Store window size for use upon app restart\r\n    prefStore.set('windowBounds', { height, width });\r\n  });\r\n\r\n  mainWindow.on('closed', () => {\r\n    mainWindow = null;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\napp.on('ready', createWindow);\r\n\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') {\r\n    app.quit()\r\n  }\r\n});\r\n\r\napp.on('activate', () => {\r\n  if (mainWindow === null) {\r\n    createWindow();\r\n  }\r\n});\r\n\r\n\r\n// Make this app a single instance app.\r\n//\r\n// The main window will be restored and focused instead of a second window\r\n// opened when a person attempts to launch a second instance.\r\n//\r\n// Returns true if the current version of the app should quit instead of\r\n// launching.\r\nfunction makeSingleInstance () {\r\n  if (process.mas) return\r\n\r\n  app.requestSingleInstanceLock()\r\n\r\n  app.on('second-instance', () => {\r\n    if (mainWindow) {\r\n      if (mainWindow.isMinimized()) mainWindow.restore()\r\n      mainWindow.focus()\r\n    }\r\n  })\r\n}\r\n\r\n// Require each JS file in the main-process dir\r\nfunction loadDemos () {\r\n  const files = glob.sync(path.join(__dirname, 'main-process/**/*.js'))\r\n  files.forEach((file) => { require(file) })\r\n}\r\n"],"file":"main.js"}